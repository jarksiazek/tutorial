* Multicontainters pod
  * Patterns
    * SIDECAR
      * e.g. log agent
    * ADAPTER
      * e.g. changing format logs 
    * AMBASSADOR
      * e.g. proxy logs to database   
* ```
  ...
  spec:
    - name: simple-webapp
      image: simple-webapp
      ports:
        - containerPort: 8080
    - name: log-agent
      image: log-agent
      ports:8081
        - 
  ```
  
* Container Logging
   * ```kubectl logs -f <pod-name>``` - option for one contrainer in the pod
   * ```kubectl logs -f <pod-name> <container-name>``` - option for multi contrainers in the pod  

* Monitoring Metrics Server
  * ```git clone http://github.com/kuberneter-incubator/metrics-server.git```
  * ```kubectl create -f deploy/1.8+/```
  * ```kubectl top node``` - getting some statictics from metrics server
  * ```kubectl top pods``` - getting some statictics from metrics server

###Pod Design
* Labels,Selectors and Annotations
 * ```
   apiVersion: v1
   kind: Pod
   metadata:
    name: simple-webapp
    labels:
     app:App1
     function:Front-end
   spec:
    contrainers:
    ...
   ``` 
  * ```kubectl get pod --selector app=App1```
  * ```
   apiVersion: apps/v1
   kind: ReplicaSet
   metadata:
    name: simple-webapp
    labels:
     app:App1
     function:Front-end
   spec:
    replicas: 3
    selector:
     matchLabels:
      app: App1 # spec label -> template label
     template:
      metadata:
       labels:
        app: App1
        function: Front-end
       spec:
        containers:
        - name: simple-webapp
          image: simple-webapp
    ...
   ``` 
* Annotations
 * additional information
 
* Depolyment
 * CREATE - ```kubectl create -f deployment.yaml```
 * GET - ```kubectl get deployment```
 * UPDATE from file - ```kubectl apply -f deployment.yaml```
 * UPDATE from cmd - ```kubectl set image deployment nginx=nginx:1.9.1```
 * STATUS - ```kubectl rollout status deployment```
 * HISTORY - ```kubectl rollout history deployment```
 * ROLLBACK - ```kubectl rollout undo deployment```
 
* Deployment - update(rollaout) and rollback
 * Dyployment stategies
  * recreate - downtime (not default)
  * rolling update - default
 * ```kubectl rollout status deployment/myapp-deployment``` - status of rollout for deployment
 * ```kubectl rollout history deployment/myapp-deployment``` - history of rollout for deployment
 * ```kubectl rollout undo deployment/myapp-deployment``` - rollback
 
* Jobs
 * ```
    apiVersion: batch/v1
    kind: Job
    metadata:
     name: math-add-job
    spec:
     completions: 3 #create 3 jobs and 3 pods
     parallelism: 3 #optional, default is sequentional process 1 -> 2 -> 3
     template:
      spec:
       containers:
        - name: math-add
          image: ubuntu
          command: ['expr', '3', '+', '2']
      restartPolicy: Naver    
    ``` 
 * CREATE JOB - ```kubectl create -f job-definition.yaml```   
 * GET JOBS - ```kubectl get jobs```   
 * GET OUTPUT - ```kubectl logs <pod-name>```   
 * DELETE JOB - ```kubectl delete <job-name>```  
 
* CRON JOB
 * ```
    apiVersion: batch/v1beta1
    kind: CronJob
    metadata:
     name: reporting-cron-job
    spec:
     schedule: "*/1 * * * *"
     jobTemplate:
      spec:
       completions: 3 #create 3 jobs and 3 pods
       parallelism: 3 #optional, default is sequentional process 1 -> 2 -> 3
       template:
        spec:
         containers:
          - name: reporting-tool
            image: reporting-tool
         restartPolicy: Naver    
    ``` 
 * CREATE CRONJOB - ```kubectl create -f job-definition.yaml```   
 * GET CRONJOBS - ```kubectl get cronjobs```  
 
* SERVICES
 * Types
  * NodePort
   * external access to the app 
   * node (Node Port 30000-32767) -> Service (Port)-> PodPort (Target Port)
   * ```apiVersion: v1
        kind: Service
        metadata:
         name: app-service
        spec:
         type: NodePort
         ports:
          - targetPort: 80 #pod
            port: 80 #service
            nodePort: 3008 #node
         selector:
          app: myapp #data from POD metadata.labels
          type: front-end
    * Hitting app ```curl http://<service-ip>:<nodePort>```      
  * ClusterIP
   * connection between nodes and pods in the cluster (front->backend->db)
   * ```apiVersion: v1
     kind: Service
     metadata:
      name: back-end
     spec:
      type: ClousterIP
      ports:
       - targetPort: 80 #pod backend 
         port: 80 #service port
      selector:
       app: myapp #data from POD metadata.labels
       type: back-end
  * LoadBalancer
